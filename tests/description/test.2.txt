Test.2

<<<<<<< HEAD:tests/description/test.2.txt
0.1 0 tests/In/files/8kb.txt
0 0.2 tests/In/files/8kb.txt
0 0.3 tests/In/files/8kb.txt
1.5 0.1 tests/In/files/8kb.txt
0.1 0 tests/In/files/8kb.txt
0 0.2 tests/In/files/8kb.txt

1 threads
6 total files

=======
>>>>>>> e3a8d0682bd213db8363d31b4685c2a671725ca2:description/test.2.txt
Group Number:5

Purpose: Test 2 is to test 6 files of increasing size in 1 thread orientation

How it works: By inputing all 6 files at the variable initial and decay time setting threads to 1 on input.
<<<<<<< HEAD:tests/description/test.2.txt
Expected result: The all results will follow intial time with such small test files. 2 3 6 1 5 4
=======

Expected result: The all results will become 32kb file last.

>>>>>>> e3a8d0682bd213db8363d31b4685c2a671725ca2:description/test.2.txt
SJF:
If the multiple files come in to the queue, we will expected them sort by the
size of the file. Sometimes they will finish too soon before another file join
in the queue. No ordering will occur with same size files, 2 3 6 1 5 4

RR:
Large files have to be processed in size quantum of 8KB. Files that arrive
early start to process, later file can join and each of them take the turn.
All files are ordered by intial input and run through once 2 3 6 1 5 4.

MLFB:
Files first join the 8KB queue, and 64KB queue and finally Round Robin. The order
of completion of the process depends on the processing time and arrival time of
<<<<<<< HEAD:tests/description/test.2.txt
each file. One run through of queue results in same as RR 2 3 6 1 5 4.
=======
each file.


file:
38080
0.1 0.0 tests/8kb.txt
0.0 0.2 tests/16kb.txt
0.0 0.3 tests/24kb.txt
1.5 0.1 tests/32kb.txt
0.1 0.0 tests/64kb.txt
0.0 0.2 tests/128kb.txt

setup:
1 threads
6 total files


>>>>>>> e3a8d0682bd213db8363d31b4685c2a671725ca2:description/test.2.txt
